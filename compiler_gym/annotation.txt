В исследовательской работе предлагаются к разработке алгоритмы и методы автоматизированного поиска оптимальных последовательностей компиляторных трансформаций с помощью обучения подкреплением, реализующие как многошаговый выбор проходов, так и поиск оптимальных параметров для отдельных параметрических оптимизационных проходов, таких как "раскрутка циклов", "векторизация циклов". Проект, предлагаемый на конкурс, в первую очередь направлен на решение следующих задач:

1. Улучшение точности и масштабируемости существующих способов представления программ для построения пространства наблюдения агента, а также выработка способов, учитывающих программную семантику.
2. Создание многошаговых методов поиска последовательностей трансформаций, с одной стороны, ускоряющих поиск, а с другой -- менее подверженных сходимости к локальным оптимумам.
3. Модификацию существующих методов с целью учёта многокритериального поиска, сохраняющего баланс между различными характеристиками программы (размер кода и производительность).
4. Модификацию существующих методов построения пространства шагов и пространства наблюдения агента с целью выбора оптимальных параметров для параметрических оптимизационных проходов.

Масштаб и комплексность проблемы обусловлены:
I. Общей сложностью как ручной оптимизации программного обеспечения, так и экспертного выбора оптимизационных проходов при компиляции, который, в условиях несовершенства последовательностей "уровней оптимизации", сводит выбор к фактическому перебору по огромному пространству оптимизации, и требует выработки средств автоматизации либо полу-автоматизации.
II. Отсутствием стандартных способов представления программ компиляторами в формате, подходящем для применения алгоритмов машинного обучения, что затрудняет его применение обучения к автоматическому подбору параметров компиляции. Для разработанных отдельно способов представления также остро стоит вопрос репрезентативности признаков и отражения программной семантики в получаемом представлении, а также вопрос масштабируемости построения на единицы трансляции относительно большого размера. Кроме того, использование некоторых представлений может приводить к сильной разреженности пространства наград, что может приводить к замедлению или остановке обучения без учителя и обучения с подкреплением. Требуется улучшение существующих методов построения представлений и методов поиска. В особенности, стоят вопросы ускорения поиска и повышения качества найденного решения.
III. Тем фактом, что ни один из существующих инструментов оптимизации не производит явно поиск оптимальных параметров для параметрических проходов в ходе построения оптимальной последовательности.
IV. Практической необходимостью производить оптимизации по нескольким критериям одновременно. К примеру, зачастую требуется минимизировать размер выходного бинарного файла без критического ухудшения производительности, либо наоборот -- увеличить производительность без критического увеличения размера.

Научная новизна задачи 1 проекта заключается как в построении новых и улучшении существующих методов характеризации программ для применения методов машинного обучения в анализе ПО, определении их ключевых свойств, так и в определении ключевых признаков представлений кода для конкретных задач автоматизированного поиска последовательностей оптимизационных проходов компиляторов. Научная новизна задачи исследования 2 заключается в построении гибридных методов поиска, агрегирующих наиболее важные свойства итерационных методов и методов глобального предсказания -- скорости сходимости и точности предсказаний. Научная новизна задачи исследования 3 заключается в многофакторном анализе и экспериментальной проверке существующих методов решения поставленной задачи с помощью обучения с подкреплением на сценариях с различными пространствами наград и ограничениями. Научная новизна задачи исследования 4: по данным авторов проекта, исследование по интеграции процедуры подбора оптимальных параметров трансформаций непосредственно в процедуру поиска оптимальных последовательностей предлагается впервые. 


Задачи 1-4, поставленные в проекте, должны быть решены с целью создания методологической и инструментальной базы авто-настройки современных компиляторов средствами машинного обучения без фактической модификации самого компилятора и необходимостью подготовки огромных обучающих выборок. Разработанный в ходе выполнения ключевых задач проекта программный комплекс может быть использован как система машинного обучения, управляющая оптимизирующей подсистемой компилятора с целью достижения лучших, чем при ручной  оптимизации, либо оптимизации флагами компилятора, результатов, по производительности, компактности и других характеристик исполняемого кода.
